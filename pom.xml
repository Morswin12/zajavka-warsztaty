<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>org.example</groupId>
    <artifactId>untitled_goro</artifactId>
    <version>1.0-SNAPSHOT</version>

    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
<!--        <maven.compiler.source>19</maven.compiler.source>-->
<!--        <maven.compiler.target>19</maven.compiler.target>-->
<!--        zamiast tych dwóch powyżej od java 9 mona używać zapisu jak poniżej:-->
        <maven.compiler.release>19</maven.compiler.release>
    </properties>

    <dependencies>
        <!-- https://mvnrepository.com/artifact/com.github.brzozasr/exchange-rates-nbp -->
        <dependency>
            <groupId>com.github.brzozasr</groupId>
            <artifactId>exchange-rates-nbp</artifactId>
            <version>1.0.1</version>
        </dependency>
        <!-- https://mvnrepository.com/artifact/org.jsoup/jsoup -->
        <dependency>
            <groupId>org.jsoup</groupId>
            <artifactId>jsoup</artifactId>
            <version>1.14.2</version>
<!--            <version>1.14.2-SNAPSHOT</version> - wersja, która jest w trakcie developmentu, czyli dziś i jutro może mieć trochę inną zawartość (brak ostatecznej wersji) -->
<!--        <scope>compile</scope> - domyślny scope, (class path do biblioteki dodana na etapie kompilacji i uruchomienia), jeśli nic nie podamy to jest ten -->
<!--        <scope>provided</scope> - zależność (class path) dodana na etapie kompilacji, ale na etapie uruchomienia już nie. Potrzebne do niektórych bibliotek, które nie muszą byc na etapie uruchomienia np. Lombok   -->
<!--        <scope>runtime</scope> - biblioteka nie jest potrzebna na etapie kompilacji, ale jest potrzebna w czasie działania programu-->
<!--        <scope>test</scope> - dana zależność (class path biblioteki ma być widoczna tylko w testach) -->
        </dependency>

    </dependencies>

<!--    <profiles>-->
<!--        <profile>-->
<!--            <id>DEV</id>  &lt;!&ndash; tu określamy, że jakiś fragment kodu ma być uruchamiany dla jakiegoś danego profilu (deweloperskiego, testowego, produkcyjnego) &ndash;&gt;-->
<!--            <build></build>-->
<!--            <repositories></repositories>-->
<!--            <dependencies></dependencies>-->
<!--        </profile>-->
<!--        <profile>-->
<!--            <id>TEST</id>  &lt;!&ndash; tu określamy, że jakiś fragment kodu ma być uruchamiany dla jakiegoś danego profilu (deweloperskiego, testowego, produkcyjnego) &ndash;&gt;-->
<!--            <build></build>-->
<!--            <repositories></repositories>-->
<!--            <dependencies></dependencies>-->
<!--        </profile>-->
<!--&lt;!&ndash;        // i możemy uruchomić konkretny profil z naszymi ustawieniami&ndash;&gt;-->
<!--&lt;!&ndash;        // mvn compile -P TEST&ndash;&gt;-->
<!--&lt;!&ndash;        // mvn compile -P DEV&ndash;&gt;-->
<!--    </profiles>-->

    <build>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.11.0</version>
                <configuration>
<!--                    poniższy zapis nie jest potrzebny, bo mamy wersie java podaną wyżej-->
<!--                    <release>-->
<!--                        17-->
<!--                    </release>-->
                </configuration>
            </plugin>
<!--            plugin do tworzenia Fat Jar, czyli jar_with_dependencies, który ma w sobie ściągnięte i spakowane także wszystkie zewnętrzne biblioteki używane w projekcie-->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-assembly-plugin</artifactId>
                <version>3.6.0</version>
                <configuration>
                    <archive>
                        <manifest>
                            <mainClass>WARSZTATY.Warsztat_5_BUILDING_TOOLS.P10_Maven_Fat_Jar_oraz_Profiles.Main</mainClass>
                        </manifest>
                    </archive>
                    <descriptorRefs>jar-with-dependencies</descriptorRefs>
                </configuration>
                <executions>
                    <execution>
                        <id>make-assembly</id>
                        <phase>package</phase>
                        <goals>
                            <goal>single</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
<!--            plugin sprawdzający poprawność napisanego przez nas kodu -->
<!--            <plugin>-->
<!--                <groupId>org.apache.maven.plugins</groupId>-->
<!--                <artifactId>maven-pmd-plugin</artifactId>-->
<!--                <version>3.21.0</version>-->
<!--                <configuration>-->
<!--                    <printFailingErrors>true</printFailingErrors>-->
<!--                </configuration>-->
<!--                <executions>-->
<!--                    <execution>-->
<!--                        <phase>validate</phase>-->
<!--                        <goals>-->
<!--                            <goal>check</goal>-->
<!--                        </goals>-->
<!--                    </execution>-->
<!--                </executions>-->
<!--            </plugin>-->
        </plugins>
    </build>

</project>